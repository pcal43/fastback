plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.modrinth.minotaur" version "2.8.2"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

architectury {
    platformSetupLoomIde()
    forge()
}

shadowJar {
    //https://stackoverflow.com/questions/73286776/grpc-unsupportedaddresstypeexception-but-only-when-packaged-with-shadowjar
    // This does in fact make service discovery work when packaged; still doesn't work in the IDE.  see SshHacks.
    mergeServiceFiles()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

archivesBaseName = "${project.archives_base_name}"
version = "${project.mod_version}-forge"
group = project.maven_group

dependencies {
    forge("net.minecraftforge:forge:${project.forge_version}") { transitive false }

    // note to self: implementation, NOT include.  include does implicit jarjar

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // FIXME? I still don't understand if I need to declare all of these things as forgeRuntimeLibrary.  It sort
    // of seems like I do.

    forgeRuntimeLibrary implementation("org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}") { transitive = false }
    shadowCommon("org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}") { transitive = false }

    forgeRuntimeLibrary runtimeOnly("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${project.jgit_version}") { transitive = false; }
    shadowCommon("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${project.jgit_version}") { transitive = false }

    forgeRuntimeLibrary runtimeOnly('com.jcraft:jsch:0.1.55')
    shadowCommon('com.jcraft:jsch:0.1.55')

    forgeRuntimeLibrary runtimeOnly("com.googlecode.javaewah:JavaEWAH:${project.JavaEWAH_version}")  { transitive = false }
    shadowCommon  ("com.googlecode.javaewah:JavaEWAH:${project.JavaEWAH_version}")  { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    exclude('META-INF/maven/**')

    // https://stackoverflow.com/questions/36659980/java-jar-classnotfoundexception-even-though-dependent-library-exists
    // Forge has full control over loading the classes of a mod and it specifically checks the package information
    // of every class it loads against a set of restricted package paths to protect its own dependencies from
    // accidentally being overwritten by loading a different version of a similar dependency. In this case, Forge
    // uses a few Apache libs, so it prevents the loading of classes from the org.apache package namespace.

    relocate 'org/eclipse', 'net/pcal/fastback/shaded/org/eclipse'
    relocate 'com/jcraft', 'net/pcal/fastback/shaded/com/jcraft'
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {

    archiveClassifier = 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}



// https://github.com/modrinth/minotaur
modrinth {
    token = System.getenv("MODRINTH_TOKEN") ?: 'MODRINTH_TOKEN_NOT_SET'
    projectId = "fastback"
    //versionNumber = "${project.mod_version}-forge"
    versionNumber = "0.15.2-alpha+1.20.1-forge"

    versionType = "alpha"
    uploadFile = remapJar
    changelog = "<p><a href='https://github.com/pcal43/fastback/releases/tag/${project.mod_version}'>https://github.com/pcal43/fastback/releases/tag/${project.mod_version}</a></p>"
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["forge"]
    dependencies {
        required.project "fabric-api"
    }
}


// https://github.com/matthewprenger/CurseGradle
curseforge {
    apiKey = System.getenv("CURSEFORGE_TOKEN") ?: 'CURSEFORGE_TOKEN_NOT_SET'

    project {
        id = "667417"
        releaseType = "alpha"
        changelog = "https://github.com/pcal43/fastback/releases/tag/${project.mod_version}"
        changelogType = "markdown"
        mod_version = "0.15.2-alpha+1.20.1-forge"
//        mod_version = "${project.mod_version}-forge"
        addGameVersion ((String) project.minecraft_version)
        addGameVersion "Forge"
        mainArtifact(remapJar)
        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}
