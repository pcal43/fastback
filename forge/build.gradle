plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

shadowJar {
    //https://stackoverflow.com/questions/73286776/grpc-unsupportedaddresstypeexception-but-only-when-packaged-with-shadowjar
    // This does in fact make service discovery work when packaged; still doesn't work in the IDE.  see SshHacks.
    mergeServiceFiles()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

archivesBaseName = "${project.archives_base_name}"
version = "${project.mod_version}-forge"
group = project.maven_group

dependencies {
    forge("net.minecraftforge:forge:${project.forge_version}") { transitive false }

    // note to self: implementation, NOT include.  include does implicit jarjar

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // FIXME? I still don't understand if I need to declare all of these things as forgeRuntimeLibrary.  It sort
    // of seems like I do.

    forgeRuntimeLibrary implementation("org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}") { transitive = false }
    shadowCommon("org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}") { transitive = false }

    forgeRuntimeLibrary runtimeOnly("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${project.jgit_version}") { transitive = false; }
    shadowCommon("org.eclipse.jgit:org.eclipse.jgit.ssh.jsch:${project.jgit_version}") { transitive = false }

    forgeRuntimeLibrary runtimeOnly('com.jcraft:jsch:0.1.55')
    shadowCommon('com.jcraft:jsch:0.1.55')

    forgeRuntimeLibrary runtimeOnly("com.googlecode.javaewah:JavaEWAH:${project.JavaEWAH_version}")  { transitive = false }
    shadowCommon  ("com.googlecode.javaewah:JavaEWAH:${project.JavaEWAH_version}")  { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    exclude('META-INF/maven/**')
    relocate 'org/eclipse', 'net/pcal/fastback/shaded/org/eclipse'
    relocate 'com/jcraft', 'net/pcal/fastback/shaded/com/jcraft'
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = null
}

jar {

    archiveClassifier = 'dev'
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

processResources {
    inputs.property "version", project.version
    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}
