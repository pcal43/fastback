plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
//	id 'net.minecraftforge.gradle.forge' version '2.0.2'
	id "com.matthewprenger.cursegradle" version "1.4.0"

}

//apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	maven { url "https://cursemaven.com" }
}


configurations {
	// configuration that holds jars to include in the jar
	extraLibs
}

project.ext.versions = [
    jgit                : '6.2.0.202206071550-r',
    apache_sshd         : '2.8.0',
    JavaEWAH            : '1.1.13',
    fabric_permissions  : '0.2-SNAPSHOT'
]

dependencies {

	// Fabric & Minecraft
	include(modImplementation(group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: versions.jgit))
	include(modRuntimeOnly(group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.ssh.jsch', version: versions.jgit))
	include group: 'org.eclipse.jgit', name: 'org.eclipse.jgit.ssh.apache', version: versions.jgit
	include group: 'org.apache.sshd', name: 'sshd-core', version: versions.apache_sshd
	include group: 'org.apache.sshd', name: 'sshd-common', version: versions.apache_sshd
	include group: 'com.googlecode.javaewah', name: 'JavaEWAH', version: versions.JavaEWAH

	// https://github.com/lucko/fabric-permissions-api
	include(modImplementation(group: 'me.lucko', name: 'fabric-permissions-api', version: versions.fabric_permissions))

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// JUnit
	testImplementation "org.junit.jupiter:junit-jupiter-api:5.8.2"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.8.2"
}


test {
	useJUnitPlatform()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

sourceSets.test {
	resources.srcDirs = ["src/test/resources"]
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// https://github.com/modrinth/minotaur
modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = "fastback"
	versionNumber = project.mod_version
	versionType = "alpha"
	uploadFile = remapJar
	changelog = "<p><a href='https://github.com/pcal43/fastback/releases/tag/${project.mod_version}'>https://github.com/pcal43/fastback/releases/tag/${project.mod_version}</a></p>"
	gameVersions = ["1.19.2"]
	loaders = ["fabric"]
	dependencies {
		required.project "fabric-api"
	}
}


curseforge {
	apiKey = System.getenv("CURSEFORGE_TOKEN") ?: 'CURSEFORGE_TOKEN NOT_SET'

	project {
		id = "667417"
		releaseType = "release"
		changelog = "https://github.com/pcal43/fastback/releases/tag/${project.mod_version}"
		changelogType = "markdown"
		mod_version = project.mod_version
		releaseType = "beta"
		addGameVersion ((String) project.minecraft_version)
		addGameVersion "Fabric"
		mainArtifact(remapJar)

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}

	options {
		forgeGradleIntegration = false
	}

	remapJar {
		finalizedBy project.tasks.curseforge
	}



}