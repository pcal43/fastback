architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon

    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

dependencies {
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // jgit
    include implementation("org.eclipse.jgit:org.eclipse.jgit:${project.jgit_version}") { transitive = false }

    // jgit needs this
    // https://download.eclipse.org/jgit/site/6.4.0.202211300538-r/dependencies.html
    include runtimeOnly("com.googlecode.javaewah:JavaEWAH:${project.JavaEWAH_version}")  { transitive = false }

    // so jgit can do modern ssh
    include runtimeOnly("org.eclipse.jgit:org.eclipse.jgit.ssh.apache:${project.jgit_version}") { transitive = false }
    include runtimeOnly("org.apache.sshd:sshd-core:${project.apache_sshd_version}") { transitive = false }
    include runtimeOnly("org.apache.sshd:sshd-common:${project.apache_sshd_version}") { transitive = false }

    // this enables ed25519 support in apache_sshd
    // https://github.com/apache/mina-sshd/blob/dfa109b7b535d64e8ee395ddd0419e7696fb24ee/docs/dependencies.md
    include runtimeOnly("net.i2p.crypto:eddsa:${project.eddsa_version}") { transitive = false }

    // LuckPerms
    include modImplementation("me.lucko:fabric-permissions-api:${project.fabric_permissions_version}") { transitive = false }

    // Server Translations
    include modImplementation("xyz.nucleoid:server-translations-api:${project.server_translations_version}") { transitive = false }

    // needed by Server Translations
    include modRuntimeOnly("xyz.nucleoid:packet-tweaker:${project.packet_tweaker_version}") { transitive = false }

}

jar {
    dependsOn configurations.shadowCommon
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.shadowCommon.collect {
            zipTree(it)
        }
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

processResources {
    inputs.property "version", rootProject.version
    filesMatching("fabric.mod.json") {
        expand "version": rootProject.version
    }
}
